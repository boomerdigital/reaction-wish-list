"The fields by which you are allowed to sort any query that returns an `AccountConnection`"
enum AccountSortByField {
  _id
  name
  createdAt
  updatedAt
}

"Defines a new Address and the account to which it should be added"
input AddAccountAddressBookEntryInput {
  "The account ID"
  accountId: ID!

  "The address to add"
  address: AddressInput!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"Describes changes that should be applied to one of the addresses for an account"
input UpdateAccountAddressBookEntryInput {
  "The account ID"
  accountId: ID!

  "The address ID"
  addressId: ID!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "If present, make this address the default address of this type"
  type: AddressType

  "The address changes to apply"
  updates: AddressInput!
}

"Describes which address should be removed from which account"
input RemoveAccountAddressBookEntryInput {
  "The account ID"
  accountId: ID!

  "The address ID"
  addressId: ID!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"Describes an account profile currency change"
input SetAccountProfileCurrencyInput {
  "The account ID, which defaults to the viewer account"
  accountId: ID

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The currency code"
  currencyCode: String!
}

"Defines a new Email and the account to which it should be added"
input AddAccountEmailRecordInput {
  "The account ID, which defaults to the viewer account"
  accountId: ID

  "The email address to add"
  email: Email!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"Defines which email address should be removed from which account"
input RemoveAccountEmailRecordInput {
  "The account ID, which defaults to the viewer account"
  accountId: ID

  "The email address to remove"
  email: Email!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"The input object for mutating an existing `Account`"
input AccountUpdatesInput {
  currencyCode: String!

  firstName: String!

  lastName: String!

  birthDate: Date
}

"Defines how an account should be updated, and which account"
input UpdateAccountEntryInput {
  "The account ID"
  accountId: ID!

  "The field changes to apply"
  updates: AccountUpdatesInput!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

"Per-account tax exemption settings used by the Avalara plugin"
type TaxSettings {
  "Exemption number for an account"
  exemptionNo: String

  "Customer usage type. A value matching the `code` field of one TaxEntityCode, or any custom string."
  customerUsageType: String
}

"Represents a single user account"
type Account implements Node {
  "The account ID"
  _id: ID!

  "A list of physical or mailing addresses associated with this account"
  addressBook(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt): AddressConnection

  "The date and time at which this account was created"
  createdAt: DateTime!

  "The preferred currency used by this account"
  currency: Currency

  "A list of email records associated with this account"
  emailRecords: [EmailRecord]

  "A paged list of the permission groups in which this account is listed"
  groups(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: GroupSortByField = createdAt): GroupConnection

  "Arbitrary additional metadata about this account"
  metafields: [Metafield]

  "The full name of the person this account represents, if known"
  name: String

  "The first name of the person this account represents, if known"
  firstName: String

  "The last name of the person this account represents, if known"
  lastName: String

  "The birth date of the person this account represents, if known"
  birthDate: DateTime

  "Some note about this account"
  note: String

  "An object storing plugin-specific preferences for this account"
  preferences: JSONObject

  """
  The primary email address for the account. This matches the address in `emailRecords` where `provides` is "default".
  """
  primaryEmailAddress: Email!

  "The shop to which this account belongs, if it is associated with a specific shop"
  shop: Shop

  "Per-account tax exemption settings used by the Avalara plugin"
  taxSettings: TaxSettings

  "The date and time at which this account was last updated"
  updatedAt: DateTime!
}

"Wraps a list of `Accounts`, providing pagination cursors and information."
type AccountConnection implements NodeConnection {
  edges: [AccountEdge]
  nodes: [Account]
  pageInfo: PageInfo!
  totalCount: Int!
}

"A connection edge in which each node is an `Account` object"
type AccountEdge implements NodeEdge {
  cursor: ConnectionCursor!
  node: Account
}

"The response from the `addAccountAddressBookEntry` mutation"
type AddAccountAddressBookEntryPayload {
  "The added address"
  address: Address

  "The added address edge"
  addressEdge: AddressEdge

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"The response from the `addAccountEmailRecord` mutation"
type AddAccountEmailRecordPayload {
  "The added email record"
  emailRecord: EmailRecord

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"The response from the `removeAccountAddressBookEntry` mutation"
type RemoveAccountAddressBookEntryPayload {
  "The removed address"
  address: Address

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"The response from the `removeAccountEmailRecord` mutation"
type RemoveAccountEmailRecordPayload {
  "The account, with updated `emailRecords`"
  account: Account

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"The response from the `updateAccountAddressBookEntry` mutation"
type UpdateAccountAddressBookEntryPayload {
  "The updated address"
  address: Address

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"The response from the `setAccountProfileCurrency` mutation"
type SetAccountProfileCurrencyPayload {
  "The updated account"
  account: Account

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

"The response from the `updateAccount` mutation"
type UpdateAccountEntryPayload {
  "The updated account"
  account: Account

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

extend type Mutation {
  "Add a new address to the `addressBook` field for an account"
  addAccountAddressBookEntry(input: AddAccountAddressBookEntryInput!): AddAccountAddressBookEntryPayload

  "Add an email address to an account"
  addAccountEmailRecord(input: AddAccountEmailRecordInput!): AddAccountEmailRecordPayload

  "Remove an address from the `addressBook` field for an account"
  removeAccountAddressBookEntry(input: RemoveAccountAddressBookEntryInput!): RemoveAccountAddressBookEntryPayload

  "Remove an email address from an account"
  removeAccountEmailRecord(input: RemoveAccountEmailRecordInput!): RemoveAccountEmailRecordPayload

  "Set the preferred currency for an account"
  setAccountProfileCurrency(input: SetAccountProfileCurrencyInput!): SetAccountProfileCurrencyPayload

  "Remove an address that exists in the `addressBook` field for an account"
  updateAccountAddressBookEntry(input: UpdateAccountAddressBookEntryInput!): UpdateAccountAddressBookEntryPayload

  "update account information"
  updateAccountEntry(input: UpdateAccountEntryInput!): UpdateAccountEntryPayload
}

extend type Query {
  "Returns the account for the authenticated user"
  viewer: Account

  "Returns the account with the provided ID"
  account(id: ID!): Account

  """
  Returns a list of administrators for the shop with ID `shopId`, as a Relay-compatible connection.
  "Administrators" means all linked accounts that have the "admin" role for this shop.
  """
  administrators(shopId: ID!, after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: AccountSortByField = createdAt): AccountConnection
}
