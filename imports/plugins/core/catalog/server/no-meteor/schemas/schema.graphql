"The list of currently supported social network identifiers"
enum SocialNetwork {
  twitter
  facebook
  pinterest
  googleplus
}

"Represents the minimum and maximum price of a product, among all its variants"
type PriceRange {
  """
  A range display string in the format "min - max", without any currency symbol
  """
  range: String!

  "The price, in shop currency, of the least expensive possible variant with the least expensive possible option"
  min: Float!

  "The price, in shop currency, of the most expensive possible variant with the most expensive possible option"
  max: Float!
}

"The product price or price range for a specific currency"
type ProductPricingInfo {
  """
  A comparison price value, usually MSRP. If `price` is null, this will also be null. That is,
  only purchasable variants will have a `compareAtPrice`.
  """
  compareAtPrice: Money

  "The code for the currency these pricing details applies to"
  currency: Currency!

  "Pricing converted to specified currency"
  currencyExchangePricing(
    currencyCode: String!
  ): CurrencyExchangeProductPricingInfo

  """
  UI should display this price. If a product has multiple potential prices depending on selected
  variants and options, then this is a price range string such as "$3.95 - $6.99". It includes the currency
  symbols.
  """
  displayPrice: String!

  "The price of the most expensive possible variant+option combination"
  maxPrice: Float!

  "The price of the least expensive possible variant+option combination"
  minPrice: Float!

  """
  For variants with no options and for options, this will always be set to a price. For variants
  with options and products, this will be `null`. There must be a price for a variant to be
  added to a cart or purchased. Otherwise you would instead add one of its child options to a cart.
  """
  price: Float
}

"The product price or price range for a specific currency"
type CurrencyExchangeProductPricingInfo {
  """
  A comparison price value, usually MSRP. If `price` is null, this will also be null. That is,
  only purchasable variants will have a `compareAtPrice`.
  """
  compareAtPrice: Money

  "The code for the currency these pricing details applies to"
  currency: Currency!

  """
  UI should display this price. If a product has multiple potential prices depending on selected
  variants and options, then this is a price range string such as "$3.95 - $6.99". It includes the currency
  symbols.
  """
  displayPrice: String!

  "The price of the most expensive possible variant+option combination"
  maxPrice: Float!

  "The price of the least expensive possible variant+option combination"
  minPrice: Float!

  """
  For variants with no options and for options, this will always be set to a price. For variants
  with options and products, this will be `null`. There must be a price for a variant to be
  added to a cart or purchased. Otherwise you would instead add one of its child options to a cart.
  """
  price: Float
}

"Holds metadata specific to a specific social network service"
type SocialMetadata {
  "Which social network is this metadata for"
  service: SocialNetwork

  "Default share message to use when sharing this product on this social network"
  message: String
}

"This interface represents the fields that are identical for both Products and Variants"
interface CatalogProductOrVariant {
  barcode: String

  # This should be required but we need to migrate existing data first
  createdAt: DateTime
  height: Float
  isLowQuantity: Boolean!
  isSoldOut: Boolean!
  length: Float
  lowInventoryWarningThreshold: Int
  metafields: [Metafield]
  minOrderQuantity: Int
  originCountry: String
  shop: Shop!
  sku: String
  title: String

  # This should be required but we need to migrate existing data first
  updatedAt: DateTime
  weight: Float
  width: Float
}

"""
Represents a product that has been published into a shop catalog. The related `Product` is the source of truth for
shop administrators, but that is then published to a catalog as a `CatalogProduct`, which is what should
be displayed to shoppers who browse that catalog.
"""
type CatalogProduct implements CatalogProductOrVariant & Node {
  "The CatalogProduct ID. Do not assume that this is the same as the related product ID. See `productId` for that."
  _id: ID!

  "The product barcode value, if it has one"
  barcode: String

  "The date and time at which this CatalogProduct was created, which is when the related product was first published"
  createdAt: DateTime!

  "The full product description, which may have newline characters in it"
  description: String

  "The height of the product, if it has physical dimensions"
  height: Float

  """
  The quantity of this item currently available to sell.
  This number is updated when an order is placed by the customer.
  This number does not include reserved inventory (i.e. inventory that has been ordered, but not yet processed by the operator).
  This number is calculated by summing all child variant inventory numbers.
  This is most likely the quantity to display in the storefront UI.
  """
  inventoryAvailableToSell: Int

  """
  The quantity of this item currently in stock.
  This number is updated when an order is processed by the operator.
  This number includes all inventory, including reserved inventory (i.e. inventory that has been ordered, but not yet processed by the operator).
  This number is calculated by summing all child variant inventory numbers.
  This is most likely just used as a reference in the operator UI, and not displayed in the storefront UI.
  """
  inventoryInStock: Int

  "True if isSoldOut is true AND none of the variants have an inventoryPolicy set AND available inventory is 0"
  isBackorder: Boolean!

  "True if this product has been deleted. Typically, deleted products are not returned in queries."
  isDeleted: Boolean!

  "True if at least one of the variants has inventoryManagement enabled and has an available quantity less than its lowInventoryWarningThreshold"
  isLowQuantity: Boolean!

  "True if every product variant has inventoryManagement enabled and has 0 inventory"
  isSoldOut: Boolean!

  "True if this product should be shown to shoppers. Typically, non-visible products are not returned in queries."
  isVisible: Boolean!

  "The length of the product, if it has physical dimensions"
  length: Float

  "The quantity value below which `isLowQuantity` should be true"
  lowInventoryWarningThreshold: Int

  "All media for this product and its variants"
  media: [ImageInfo]

  "Arbitrary additional metadata about this product"
  metafields: [Metafield]

  "The product description to use for page `description` meta element in HTML"
  metaDescription: String

  "The minimum quantity that must be added to a cart"
  minOrderQuantity: Int

  "The country of origin"
  originCountry: String

  "Subtitle"
  pageTitle: String

  "Dimensions and other information about the containers in which this product will be shipped"
  parcel: ShippingParcel

  "The range of prices among all variants (Deprecated use Pricing instead)"
  price: PriceRange

  "Price and related information, per currency"
  pricing: [ProductPricingInfo]!

  "The primary image"
  primaryImage: ImageInfo

  "The related Product ID"
  productId: ID!

  "An arbitrary product type value, such as from an external system"
  productType: String

  "The shop to which this product belongs"
  shop: Shop!

  shopifyId: Float

  "A stock keeping unit (SKU) identifier for this product"
  sku: String

  "A URL-safe and human-readable string that uniquely identifies this product"
  slug: String

  "Holds metadata specific to a specific social network service"
  socialMetadata: [SocialMetadata]

  "When a shopper purchases this product, what types of fulfillment can they choose from?"
  supportedFulfillmentTypes: [FulfillmentType]!

  "The list of tag IDs that have been applied to this product"
  tagIds: [ID]

  "The list of tags that have been applied to this product"
  tags(after: ConnectionCursor, before: ConnectionCursor, first: ConnectionLimitInt, last: ConnectionLimitInt, sortOrder: SortOrder = asc, sortBy: TagSortByField = _id): TagConnection

  "Product title"
  title: String

  "The date and time at which this CatalogProduct was last updated, which is when the related product was most recently published"
  updatedAt: DateTime!

  "A flat list of all variants for this product"
  variants: [CatalogProductVariant]

  "The product vendor or manufacturer, for display"
  vendor: String

  "The weight of the product on Earth, if it has physical dimensions"
  weight: Float

  "The width of the product, if it has physical dimensions"
  width: Float
}

type CatalogProductVariant implements CatalogProductOrVariant & Node {
  "The CatalogProductVariant ID. Do not assume that this is the same as the related variant ID. See `variantId` for that."
  _id: ID!

  "The product variant barcode value, if it has one"
  barcode: String

  "Indicates when the seller has allowed the sale of product which is not in stock. True if inventoryManagement is true AND none of the variants have an inventoryPolicy set."
  canBackorder: Boolean!

  "The date and time at which this CatalogProductVariant was created, which is when the related product was first published"
  createdAt: DateTime

  "The height of the product variant, if it has physical dimensions"
  height: Float

  "The position of this variant among other variants at the same level of the product-variant-option hierarchy"
  index: Int!

  """
  The quantity of this item currently available to sell.
  This number is updated when an order is placed by the customer.
  This number does not include reserved inventory (i.e. inventory that has been ordered, but not yet processed by the operator).
  If this is a variant, this number is created by summing all child option inventory numbers.
  This is most likely the quantity to display in the storefront UI.
  """
  inventoryAvailableToSell: Int

  """
  The quantity of this item currently in stock.
  This number is updated when an order is processed by the operator.
  This number includes all inventory, including reserved inventory (i.e. inventory that has been ordered, but not yet processed by the operator).
  If this is a variant, this number is created by summing all child option inventory numbers.
  This is most likely just used as a reference in the operator UI, and not displayed in the storefront UI.
  """
  inventoryInStock: Int

  "True if inventory management is enabled for this variant"
  inventoryManagement: Boolean!

  "True if inventory policy is enabled for this variant"
  inventoryPolicy: Boolean!

  "True if isSoldOut is true AND none of the variants have an inventoryPolicy set AND available inventory is 0"
  isBackorder: Boolean!

  "True if inventoryManagement is enabled and this variant has an available quantity less than its lowInventoryWarningThreshold"
  isLowQuantity: Boolean!

  "True if inventoryManagement is enabled and this variant has 0 inventory"
  isSoldOut: Boolean!

  "The length of the product, if it has physical dimensions"
  length: Float

  "The quantity value below which `isLowQuantity` should be true"
  lowInventoryWarningThreshold: Int

  "All media for this variant / option"
  media: [ImageInfo]

  "Arbitrary additional metadata about this product"
  metafields: [Metafield]

  "The minimum quantity that must be added to a cart"
  minOrderQuantity: Int

  "Child variants, if any"
  options: [CatalogProductVariant]

  "An option title. If this is set and this variant has a CatalogProductVariant parent, treat this variant as an option"
  optionTitle: String

  "The country of origin"
  originCountry: String

  "The price, in the default shop currency (Deprecated use Pricing instead)"
  price: Float!

  "Price and related information, per currency"
  pricing: [ProductPricingInfo]!

  "The primary image of this variant / option"
  primaryImage: ImageInfo

  "The shop to which this product variant belongs"
  shop: Shop!

  "The product's id from Shopify"
  shopifyId: Float

  "A stock keeping unit (SKU) identifier for this product"
  sku: String

  "Product title"
  title: String

  "The date and time at which this CatalogProduct was last updated, which is when the related product was most recently published"
  updatedAt: DateTime

  "The related Variant ID"
  variantId: ID!

  "The weight of the product on Earth, if it has physical dimensions"
  weight: Float

  "The width of the product, if it has physical dimensions"
  width: Float
}

"""
Catalog items are combined to create a catalog. Each item can represent a different type of content.
"""
interface CatalogItem {
  _id: ID!
  shop: Shop!
  createdAt: DateTime
  updatedAt: DateTime
}

"Represents a catalog item that displays a product"
type CatalogItemProduct implements CatalogItem & Node {
  "The CatalogItemProduct ID"
  _id: ID!

  "The shop to which this catalog belongs"
  shop: Shop!

  "The catalog product"
  product: CatalogProduct

  "The date and time at which this CatalogItem was first created, which is when the related product was first published"
  createdAt: DateTime!

  "The date and time at which this CatalogItem was last updated, which is when the related product was most recently published"
  updatedAt: DateTime!
}

"Represents a catalog item that displays some non-product content"
type CatalogItemContent implements CatalogItem & Node {
  "The CatalogItemProduct ID"
  _id: ID!

  "The shop to which this catalog belongs"
  shop: Shop!

  "The date and time at which this CatalogItem was first created"
  createdAt: DateTime!

  "The date and time at which this CatalogItem was last updated"
  updatedAt: DateTime!
}

type CatalogItemEdge {
  cursor: ConnectionCursor!
  node: CatalogItem
}

type CatalogItemConnection {
  edges: [CatalogItemEdge]
  nodes: [CatalogItem]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Catalog implements Node {
  "The Catalog ID"
  _id: ID!

  "The shop to which this catalog belongs"
  shop: Shop!

  "The date and time at which this Catalog was first created"
  createdAt: DateTime!

  "The date and time at which this Catalog was last updated"
  updatedAt: DateTime!
}

enum CatalogItemSortByField {
  _id
  createdAt
  minPrice
  updatedAt
  featured
}

extend type Query {
  "Gets items from a shop catalog"
  catalogItems(
    "Provide a list of shop IDs from which you want to get catalog items"
    shopIds: [ID]!

    "Optionally provide a list of tag IDs to further filter the item list"
    tagIds: [ID],

    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    sortOrder: SortOrder = desc,

    "Provide a Currency code if sortBy is minPrice"
    sortByPriceCurrencyCode: String

    "By default, items are sorted by newest products. Set this to sort by one of the other allowed fields"
    sortBy: CatalogItemSortByField = updatedAt
  ): CatalogItemConnection
  "Gets product from catalog"
  catalogItemProduct(
    "Provide either a product ID or slug"
    slugOrId: String
  ): CatalogItemProduct
}

extend type Mutation {
  "Publish products to the Catalog collection by product ID"
  publishProductsToCatalog(
    "Array of Product ID"
    productIds: [ID]!
  ): [CatalogItemProduct]
}
